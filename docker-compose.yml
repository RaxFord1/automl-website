version: '3.8'

networks:
  app-network:
    external: true

services:
  db:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD-postgres}
      POSTGRES_DB: ${POSTGRES_DB-postgres}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - app-network

  front-ml:
    image: front-ml:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    build:
      context: .
      dockerfile: DockerFileFrontML
    ports:
      - "5001:5000"
    depends_on:
      - db
      - rabbitmq
    volumes:
      - .:/app
      - datasets:/datasets
      - results:/results
    networks:
      - app-network

  train-ml:
    image: train-ml:latest
    build:
      context: .
      dockerfile: DockerFileTrainML
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    depends_on:
      - front-ml
    volumes:
      - .:/app
      - datasets:/datasets
      - results:/results
    networks:
      - app-network
#    command: ["conda", "run", "--no-capture-output", "-n", "training-ml", "python", "train.py"]
#    command: ["/bin/sh", "-c", "sleep infinity"]

volumes:
  pgdata:
  datasets:
  results: