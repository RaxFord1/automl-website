version: '3.8'

networks:
  app-network:
    driver: bridge

services:
  db:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - app-network

  front-ml:
    build:
      context: .
      dockerfile: DockerFileFrontML
    ports:
      - "5001:5000"
    depends_on:
      - db
      - rabbitmq
    volumes:
      - .:/app
      - datasets:${DATASETS_FOLDER}
      - results:${RESULTS_FOLDER}
    networks:
      - app-network

  train-ml:
    build:
      context: .
      dockerfile: DockerFileTrainML
    depends_on:
      - rabbitmq
    volumes:
      - .:/app
      - datasets:${DATASETS_FOLDER}
      - results:${RESULTS_FOLDER}
    networks:
      - app-network
    command: ["conda", "run", "--no-capture-output", "-n", "training-ml", "python", "train.py"]
#    command: ["/bin/sh", "-c", "sleep infinity"]

volumes:
  pgdata:

  datasets:

  results: